#!/usr/bin/env python3
"""
===========================================
    READ PROPS - Agent-Friendly Ingestion
===========================================

PURPOSE:
    This script reads output.csv generated by par_scrape and displays
    betting props in a clear, readable format. No coding knowledge needed.

USAGE:
    Simply run: python read_props.py
    
    The script will:
    1. Look for output.csv in the par_scrape folder
    2. Parse all betting props
    3. Display them in an easy-to-read format

REQUIREMENTS:
    - Python 3.6+
    - output.csv must exist in par_scrape folder
    - No additional libraries needed (uses built-in csv module)

NOTES:
    - If output.csv doesn't exist, you'll get a clear error message
    - All props are displayed with clear labels
    - No manual configuration needed
"""

import csv
import os
import sys
from pathlib import Path


def find_output_csv():
    """
    Locate output.csv file in the par_scrape folder.
    Returns the full path to the file or None if not found.
    """
    # Try common locations
    possible_paths = [
        Path('par_scrape/output.csv'),
        Path('../par_scrape/output.csv'),
        Path('./output.csv'),
        Path('output.csv')
    ]
    
    for path in possible_paths:
        if path.exists():
            return path
    
    return None


def read_and_display_props(csv_path):
    """
    Read the CSV file and display props in a human-readable format.
    """
    print("\n" + "="*70)
    print(" "*20 + "BETTING PROPS SUMMARY")
    print("="*70 + "\n")
    
    try:
        with open(csv_path, 'r', encoding='utf-8') as csvfile:
            reader = csv.DictReader(csvfile)
            
            # Get the field names
            fieldnames = reader.fieldnames
            
            if not fieldnames:
                print("‚ö†Ô∏è  ERROR: CSV file is empty or has no headers!")
                return False
            
            print(f"üìä Found {len(fieldnames)} columns: {', '.join(fieldnames)}\n")
            print("-"*70 + "\n")
            
            # Read and display each prop
            prop_count = 0
            for row in reader:
                prop_count += 1
                print(f"üéØ PROP #{prop_count}")
                print("-" * 40)
                
                # Display each field in the row
                for field in fieldnames:
                    value = row.get(field, 'N/A')
                    # Format field name for better readability
                    display_field = field.replace('_', ' ').title()
                    print(f"  {display_field:.<30} {value}")
                
                print()  # Blank line between props
            
            # Summary
            print("="*70)
            print(f"‚úÖ Successfully read {prop_count} betting props!")
            print("="*70 + "\n")
            
            return True
            
    except Exception as e:
        print(f"\n‚ùå ERROR reading CSV file: {e}\n")
        return False


def main():
    """
    Main function - orchestrates the script execution.
    """
    print("\nüîç Searching for output.csv from par_scrape...\n")
    
    # Find the CSV file
    csv_path = find_output_csv()
    
    if not csv_path:
        print("‚ùå ERROR: Could not find output.csv!\n")
        print("Please make sure:")
        print("  1. You have run par_scrape to generate output.csv")
        print("  2. The output.csv file is in the par_scrape folder")
        print("  3. You are running this script from the correct directory\n")
        print("Expected location: par_scrape/output.csv\n")
        sys.exit(1)
    
    print(f"‚úÖ Found output.csv at: {csv_path}\n")
    
    # Read and display the props
    success = read_and_display_props(csv_path)
    
    if not success:
        sys.exit(1)
    
    print("\nüí° TIP: Run this script anytime after par_scrape completes!\n")


if __name__ == "__main__":
    main()
vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv